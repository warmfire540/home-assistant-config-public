---
room_summary:
  template: card_room
  name: '[[[ return variables.area.split("_").map(x => x.charAt(0).toUpperCase() + x.slice(1)).join(" "); ]]]'
  icon: '[[[ return hass.areas[variables.area].icon ]]]'

  variables:
    area: ''
    problem_entities: >
      [[[
        return Object
          .keys(this._hass.entities)
          .filter(k => {
            const e = this._hass.entities[k];
            const d = this._hass.devices[e.device_id];
            return [e.area_id, d?.area_id].includes(variables.area) && e.labels.includes('problem');
          });
      ]]]
    humidity_sensor: "[[[ return 'sensor.' + variables.area + '_climate_humidity'; ]]]"
    problem_exists: "[[[ return variables.problem_entities?.some(e => states[e].state == 'on' || states[e].state > 0); ]]]"
    temperature_sensor: "[[[ return 'sensor.' + variables.area + '_climate_air_temperature'; ]]]"
    navigate: null
    entity_1:
      entity_id: "[[[ return 'light.' + variables.area + '_light'; ]]]"
      templates:
        - yellow_on
    entity_2:
      entity_id: "[[[ return 'switch.' + variables.area + '_fan'; ]]]"
      templates:
        - blue_on
    z_border_1: >
      [[[ 
        const temp_sensor = states[variables.temperature_sensor];
        const humid_sensor = states[variables.humidity_sensor];
        const temp_thresh = (temp_sensor.attributes.temperature_threshold || 80);
        const humid_thresh = (temp_sensor.attributes.humidity_threshold || 60);

        if (temp_sensor.state > temp_thresh)
          return "2px solid rgba(var(--color-red-text),1)";
        if (humid_sensor.state > humid_thresh)
          return "2px solid rgba(var(--color-blue-text),1)";
      ]]]
    z_border_2: >
      [[[ 
        const temp_sensor = states[variables.temperature_sensor];
        const humid_sensor = states[variables.humidity_sensor];
        const temp_thresh = (temp_sensor.attributes.temperature_threshold || 80);
        const humid_thresh = (temp_sensor.attributes.humidity_threshold || 60);
        
        if (humid_sensor.state > humid_thresh)
          return "2px solid rgba(var(--color-blue-text),1)";
        if (temp_sensor.state > temp_thresh)
          return "2px solid rgba(var(--color-red-text),1)";
      ]]]

  #################
  # CLIMATE & LABEL
  #################
  label: >
    [[[ 
        const climate = `${states[variables.temperature_sensor].state}Â°F - ${states[variables.humidity_sensor].state}%`;
        const d = Object.keys(hass.devices).filter(k => hass.devices[k].area_id === variables.area);
        const e = Object.keys(hass.entities).filter(k => hass.entities[k].area_id === variables.area
            || d.includes(hass.entities[k].device_id));
        const counts = [
            [d.length, 'devices'],
            [e.length, 'entities']
        ].filter(([count]) => count > 0)
        .map(([count, type]) => `${count} ${type}`)
        .join(' ');

        return `${climate}${counts ? ' ' + `<br /><span style="font-size: 0.8em">${counts}</span>` : ''}`;
    ]]]
  state:
    - operator: template
      value: >
        [[[ 
          const temp_sensor = states[variables.temperature_sensor];
          const humid_sensor = states[variables.humidity_sensor];
          const temp_thresh = (temp_sensor.attributes.temperature_threshold || 80);
          const humid_thresh = (temp_sensor.attributes.humidity_threshold || 60);

          return temp_sensor.state > temp_thresh ||  humid_sensor.state > humid_thresh;
        ]]]
      styles:
        label:
          - color: >
              [[[ 
                const temp_sensor = states[variables.temperature_sensor];
                const humid_sensor = states[variables.humidity_sensor];
                const temp_thresh = (temp_sensor.attributes.temperature_threshold || 80);
                const humid_thresh = (temp_sensor.attributes.humidity_threshold || 60);

                if (temp_sensor.state > temp_thresh)
                  return "rgba(var(--color-red-text),1)";
                if (humid_sensor.state > humid_thresh)
                  return "rgba(var(--color-blue-text),1)";
              ]]]
        card:
          - border-left: '[[[ return variables.z_border_1; ]]]'
          - border-top: '[[[ return variables.z_border_1; ]]]'
          - border-right: '[[[ return variables.z_border_2; ]]]'
          - border-bottom: '[[[ return variables.z_border_2; ]]]'

  #################
  # ROOM ENTITY
  #################
  entity: "[[[ return 'light.' + variables.area + '_light'; ]]]"
  styles:
    icon:
      - color: "[[[ if (entity?.state == 'on') return 'rgba(var(--color-yellow),1)'; else return 'rgba(var(--color-theme),0.2)'; ]]]"
    label:
      - color: "[[[ if (entity?.state == 'on') return 'rgba(var(--color-yellow-text),1)'; ]]]"
      - text-align: left
    name:
      - color: "[[[ if (entity?.state == 'on') return 'rgba(var(--color-yellow-text),1)'; ]]]"
    img_cell:
      - background-color: "[[[ if (entity?.state == 'on') return 'rgba(var(--color-yellow), 0.2)'; else return 'rgba(var(--color-theme),0.05)' ]]]"
    card:
      - background-color: "[[[ if (entity?.state == 'on') return 'rgba(var(--color-background-yellow),var(--opacity-bg))'; ]]]"

    #################
    # PROBLEM ENTITY
    #################
    custom_fields:
      notification:
        - border-radius: '50%'
        - border: '2px solid var(--card-background-color)'
        - width: '26px'
        - height: '26px'
        - position: 'absolute'
        - left: '50%'
        - top: '50%'
        - transform: 'translate(-50%,-50%)'
        - margin-top: '35%'
        - margin-left: '-35%'
        - line-height: 0
        - display: 'grid'
        - background-color: "[[[ if (variables.problem_exists) return 'rgba(var(--color-red),0.8)'; else return 'rgba(var(--color-green),0.6)'; ]]]"

  custom_fields:
    notification: >
      [[[
        if (variables.problem_entities.length) {
          return `<ha-icon icon="mdi:numeric-${variables.problem_entities.length}" style="color: var(--primary-background-color);"></ha-icon>`;
        }
      ]]]

  tap_action:
    action: navigate
    navigation_path: '[[[ return variables.navigate || variables.area.replace("_", "-"); ]]]'

  triggers_update:
    - '[[[ return variables.temperature_sensor; ]]]'
    - '[[[ return variables.humidity_sensor; ]]]'
    - '[[[ this._entities.push(...variables.problem_entities); return null; ]]]'
